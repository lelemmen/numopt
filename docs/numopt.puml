@startuml

namespace numopt {

    namespace syseq {

        abstract class BaseSystemOfEquationsSolver {
            __ protected members __
                # constexpr {static} size_t maximum_number_of_iterations = 128
                # const double convergence_threshold = 1.0e-8

                # double is_solved = false

                # const Eigen::VectorXd x0
                # const Eigen::VectorXd x
            == constructors ==
                **BaseSystemOfEquationsSolver**(const Eigen::VectorXd& x0, double convergence_threshold,
                double convergence_threshold = 1.0e-08)
            == destructor ==
                virtual ~ **BaseSystemOfEquationsSolver()** = default
            __ public pure virtual methods __
                + virtual void **solve**() = 0
            __ public methods __
                + Eigen::VectorXd **get_solution**() const
       }


        NewtonSystemOfEquationsSolver --|> BaseSystemOfEquationsSolver
        class NewtonSystemOfEquationsSolver {
            __ private members __
                - const VectorFunction f
                - const JacobianFunction J
            == constructors ==
                **NewtonSystemOfEquationsSolver**(const Eigen::VectorXd& x0, const VectorFunction& f, const JacobianFunction& J,
                double convergence_threshold = 1.0e-08)
            == destructor ==
                **~NewtonSystemOfEquationsSolver**() override = default
            __ public methods __
                + void **solve**()
        }

    }


    namespace minimization {

        abstract class BaseMinimizer {
            __ protected members __
                # constexpr {static} size_t maximum_number_of_iterations = 128
                # const double convergence_threshold = 1.0e-8

                # double is_solved = false

                # const Eigen::VectorXd x0
                # const Eigen::VectorXd x
            == constructors ==
                **BaseMinimizer**(const Eigen::VectorXd& x0, double convergence_threshold)
            == destructor ==
                virtual ~ **BaseMinimizer()** = default
            __ public pure virtual methods __
                + virtual void **solve**() = 0
            __ public methods __
                + Eigen::VectorXd **get_solution**() const
        }


        NewtonMinimizer --|> BaseMinimizer
        class NewtonMinimizer {
            __ private members __
                - const GradientFunction grad
                - const HessianFunction H
            == constructors ==
                **NewtonMinimizer**(const Eigen::VectorXd& x0, const GradientFunction& grad, const HessianFunction& H)
            == destructor ==
                **~NewtonMinimizer**() override = default
        }
    }


    namespace eigenproblem {


        abstract class BaseEigenproblemSolver {
            __ protected members __
                # const size_t dim

                # bool is_solved = false
                # double eigenvalue
                # Eigen::VectorXd eigenvector
            == protected constructors ==
                # explicit **BaseEigenproblemSolver**(size_t dim)
            == destructor ==
                virtual ~ **BaseEigenproblemSolver**() = default
            __ public pure virtual methods __
                + virtual void **solve**() = 0
            __ public methods __
                + **get_eigenvalue**() const
                + **get_eigenvector**() const
        }

        BaseMatrixSolver --|> BaseEigenproblemSolver
        abstract class BaseMatrixSolver {
            == constructor ==
                explicit BaseMatrixSolver(size_t dim)
            == destructor ==
                **~BaseMatrixSolver**() override = default
            __ public pure virtual methods __
                + virtual void **addToMatrix**(double value, size_t index1, size_t index2) = 0
        }


        DenseSolver --|> BaseMatrixSolver
        class DenseSolver {
            __ private members __
                - Eigen::MatrixXd matrix
            == constructors ==
                explicit **DenseSolver**(size_t dim)
            == destructor ==
                 **~DenseSolver**() override = default
            __ public methods __
                + void **solve**() override
                + void **addToMatrix**(double value, size_t index1, size_t index2) override
        }


        SparseSolver --|> BaseMatrixSolver
        class SparseSolver {
            __ private members __
                - Eigen::SparseMatrix<double> matrix
            == constructors ==
                explicit **SparseSolver**(size_t dim)
            == destructor ==
                 **~SparseSolver**() override = default
            __ public methods __
                + virtual void **solve**() override
                + void **addToMatrix**(double value, size_t index1, size_t index2) override
        }


        DavidsonSolver --|> BaseEigenproblemSolver
        class DavidsonSolver {
            __ private members __
                - constexpr size_t maximum_number_of_iterations = 128
                - const double convergence_threshold
                - const double correction_threshold
                - const size_t maximum_subspace_dimension
                - const size_t collapsed_subspace_dimension

                - const Eigen::VectorXd diagonal
                - const Eigen::VectorXd t_0
                - const numopt::VectorFunction matrixVectorProduct
            == constructors ==
                **DavidsonSolver**(const numopt::VectorFunction& matrixVectorProduct, const Eigen::VectorXd& diagonal, const Eigen::VectorXd& t_0,
                double convergence_threshold = 1.0e-08, double correction_threshold = 1.0e-12, size_t maximum_subspace_dimension = 15,
                size_t collapsed_subspace_dimension = 2)
                **DavidsonSolver**(const Eigen::MatrixXd& A, const Eigen::VectorXd& t_0,
                double convergence_threshold = 1.0e-08, double correction_threshold = 1.0e-12, size_t maximum_subspace_dimension = 15,
                size_t collapsed_subspace_dimension = 2)
            == destructor ==
                 **~DavidsonSolver**() override = default
            __ public methods __
                + void **solve**() override
        }


    }


}

@enduml